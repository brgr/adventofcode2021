use std::collections::{HashMap, HashSet};
use std::fmt::{Display, Error, Formatter};
use std::str::FromStr;
use std::thread::current;

use itertools;

const E1: &strn\n#..#.\n#....\n##..#\n..#..\n..###";
const E2: &str = "";
const E3: &str = "";
const E4: &str = "";
const INPUT: &strn\n##..#.#...#...#.#..#..##.#.#.##.##.####.##.#.#.##..##..##..#...##..##.#....##.#.####.##...#..#....##\n###..#..#..##..#####..##.#.##.##.##.#...##......#...#..#.#..#.....#####...#.######...#.....#...##.##\n..##.#..#......#.....##......##.###.###..#####..###.####.#.#....#.#.##..##....####..#.....###..#.##.\n#.##....#.....#.....#..####..##.####...#..#####.#.#.##.##.##.#..###...####..###.#...#.###..#..#..###\n#.##..#....#.#..#.##....#..#...##.#..#..##.#.#####...#..###...##.#.#....#..#..#....##.#..##..##..#.#\n...####.#.####..#.###.....##..#...##...#.######....####...#.#....##.#......#.#.##.##.###...#...#...#\n##..##.#....#.....#.#.#####.#.####.#.#.#.#####.###..#.......###.#.###......###.##..##.#####.#.##.###\n####.#..#####.##....###...##..###..#...###..###.####..#.##..##.#...####.....#..#.#..##...##.#.###...\n.#..#...##...####.#.###......#..##...#.##.##.#.#.##.#..##.#.#.#.#..###...###..###..###...###....#...\n#.#####..###....###..##....######.#.#..#...#.####.###.####..#.##..##..#.#.#.#..#####....##.##...##..\n....#.#.......#.#...#.##...#.#.##.#.###.#.####..#.####...########...#.###.#.#.....#.####.#..#..#.###\n.##.###.##..#....##..#.##..###......#.##.##.##...#.#...##.#######.#.#.#..###..##..####....##...#..##\n#....#..##..#.######....##.#.#........#..#.#..#.....#.#..##.#.#.##.##.#####..##...#.##..#..#....####\n#..##..#.#.....###.#.###.##.#.#.###...###...###..##..##.##.......##......##.#.##.#...#.##..#....#..#\n#.#.#.#.#.###..###.##..#..#........###..###.##..##.####.##....#..#.......#...###..#..#..#...#.....#.\n##...##.####..#####...#.#.##...##...####...##.##.##.#.#####..#..###.#.###.###.#.#.#..#...#.#.####..#\n..#..##..#####.##..##...#....###..#.#.....##...######.#..##.#..#####..#.##.#.#.#..#..#.#######..###.\n.....#.#..####..##.###..###.....#.##...#.#.#...#..#...####.#....#..#...#.##...#..##..#.##....##.###.\n......#.#...####....##.#....##..####.#...##...##..#.#.#.###..#.#..##....##...##.#.#..##.##.....###.#\n#.####..###..###.#...##..#.#.####..#...#.....###.##..###...#....#######.####.#...#.#.###..####...#.#\n###...#.#...#..####.##..###...........#..#....#..#.####.#.......##.##.###.#.#....#.#.#.#...#.#..#...\n.##.#.#.#.#...###...#...#..#.#.#...##..#..##....#...##..#.#..###.#....##.###....###...######.##.####\n.....##....#....#.#######.#..##..#..#.....###..#....#.####.##.#..##.#...##..##.#.#.###....#..#...###\n..##.#.###.#.####.#.#######.#...#.##.#..##.#####...#.###...###.##.#.###...#..#......########..##..#.\n####...#..##......#.#.###.#####.#....#..#..##.....#....##.#.#...###......###.#...#.##.#.......#.....\n#.##...#.##..###.#####..###..##.#..##..#..##.##..###...#.##.#..######.##.#...#.#.##....###.#..#.##.#\n##.#...##.#.####.#.#.#...#..#.####.##.#..#.#.##...##.###..#..###..#.###....#.###.#.#.###.#...####.##\n.##...#..#..##..#######...#..####...###..#..#.#..##.#.##.#..#..###.#.##..#.#...###...#######.####.##\n##..#.##.#...###.........#.#..#..#.#..#.#..#...##.#.##......#.####.##..###..#.###.#.#####.###...#.#.\n...#.###.#..#....####.###.##..####.#.###..##.#.####.##...#.##..#.##.###....#.#.#.##......#.####.....\n.###.#######..#....####.#..#.#...####.#.....#.#.#.###.###.#.##.###.####..#####...#.....##...###....#\n#..#..#.######.##.###.....###..##.#...###.#.#####...####..###..##.###...#..##....##...##.#.##.##..#.\n..##...#...#.####..##...#....#..#.##..###.####.##..###.#..####..##.#.####..####..##.#####..###.###..\n.#..#..#..#....##.#.#####.#.#......#.###.....#.####..#.#.#......#..#.#....#....####..###.#.....#..#.\n##.#.##....#...#...#.##.#..........####.##...#..#..##.###...#.#..##########..###.##.#.###.#.#.#.##.#\n..#.##.####....##.#..#.##...##.##..##.###.##.....##..##..#.#.#.#.....#...#...##.#..#.....#####.####.\n#.#.#..####.####....###.##.##.....###..#####.#......#.#...#..###..##.###.#....#.#.#####.#..#.#######\n##..###.#.##..####..#..#.#..##..#...###....#..##.####..##..##.##..###.###.####.#.##.###..##.####.#..\n..#.##.#.#####.#....###.#.#..#.###.#.#...##.#.#....#.##...#..#####..###..#.#.####.#...#.####...##...\n...###.#..##.#.#...#..#.#.##.#.##.##.#.#.#####..###...#...#...#.#.###......#.##.#.#..#.###.##.####.#\n#....#.##......##...##.....####.#.##..##.#..##.###########..#..##.#...##.##......##....#......##.#..\n##...#####.###.###..#.###....#.#.#..#..#.#####...###....#.##.#.####....#.#....######....#.#.##.####.\n....##....#..##......##.....#.##..####.##.##.#.#.#....#...#...##.##..#....#..##...#.#....#.#..#.###.\n...#.......#.#...#....#.#.#....#...#...##.##...###.####......#..###.##....######.##.####.##.....#...\n####..###..##...#......##...##..#.#...###..####.###.#....##.###.#..##.#...##.##........####.#...###.\n..##.##.#..####..###.#..####...#..#.#..#...#.##..#..##.#######....#...##..#..#.#......#.#.####.#.#..\n####.#.#...##....###..#.#..#..#.#...####.###...#####..######.#.....#..###.##.##........###.##.##.###\n.#.#..#....##.###..##.......###.#...#.######...#####.#..#######...##.##.#..#...#.....#...####.###..#\n..#....##.....#....###..##.##..####.....###...#.#...####..###..##....#...###...####.##..########....\n..........###...#.......##...####...#######....##..#.##.##.###..###...#######..#..####.##..#.##..##.\n#######...###...##.##..#.#....#..#..#...###..#..#.#.#..#..###..#....#...##....#..#.#.......#########\n.#..##........##.......#.###..#.#.#####.##.#.####..#.#.##...#..#...#.#.##..##.#..##.#####.##....##.#\n....##....##.#..#.#...#.....###....##...#.#.#...#.###.....#.#.....#..#####.#..##..#.#####........#..\n##.##.#....#..##..##.##.###..#.#.##..###.#..##...####.######.#.#.#...#..#.#.#...#.#..######.#....#..\n##.###.#......###..#.#..#.#..#...######.##.##.#####.####......######...####.##.#####...#..#...#.###.\n.#########....##..###..#.#....####.###.....#..#...##.###.##..####.#.##..#..#....##..###.##..##.#.##.\n#.#.#.###...#####..###.####.#####.##.#.#...##..##.#.#...###..##....###.#...##.###.....###...########\n###.#.###.....#.#.#..#.#...###.##........#.####..#...###.#.##.####..###.#..#...##.#..##.#.#...#.##.#\n..##.#..#.#..##.##.##...####..####.#####.##..#...####...##...###...#####.#####.##...###..#...#.#.##.\n##.#.#.#.####..#.##.#...#........##..#.###.###.#.....#..#..##.#####..##.#.####.#......###.#####..#.#\n#.######.###...#.###..#..#.#.#.#.###.##..###.###..#.###..#####...##..####..##.######.#.##..#.#.##...\n.##.#.#.####...###.......#.####...#..###.#.....#.#......##.#.##.###.#####....##.#.#.###......###.#..\n###..#.##.####....##.##.#..#.###........###.####....#...#...##...#..###.##.###..####.#.#.#.##.#.....\n###...#.###.....#...#.#.#..#.#....##.#.#.#.#.#..#..##.###.###...#....#####..####.##...##.#.###.#..##\n..##......#..####...##.#..##.##.......##.####.#.#.###.###...##.#.###..###...########.##...#.##....##\n.#...#.##..#..###.####.##.#.#.#..#..#.#....#..#..........#####.##.#.#.###.#.##....#...##.#.#.#..#...\n..#...##..#.#.###.##..##..####.####..#.....####.##..#.#.#....#..##.##.#####...####.#..#.#...#....#.#\n..##..#..#.#..........###.##..###..#...###.###...###..#.##.#####...####.##...####.##...#####.#.#....\n..#..####.....###..#..##..##.#..#.####.##..##..#.#.##.##.##..#....#.####.#.#..##.#.####.#..#.##.#..#\n.#.#.#############..###..##..######........##..###.#..###..##.....###.#.###.#.##.#.#.#.##.#..####..#\n...#.###...#.#..#########.###.#..##..###.#.##......########.#....#######....#...#...###..#.#####..#.\n..########.####..#..#.#..#..##.#.##...###.#..####..#.#####...##.###.###.##..##.#.#..##...##.##.#.#..\n..##.##.#.......#.##..#.#.#####...#.#..#.#####...###.##....#....#..#..####...##....#......#....###..\n...#...#..#.###..##...##.##..##.#.###...#...###..###.#..#######..#..##..####..##.#.#.#.#..#.##..#...\n.#####...##.##.#.#.#.###.#.#..##.....#..###...#..#.##.#...#.....#.#...#..#.#...#..#######.#.#######.\n#.##.#...###.#.##.#..#....##.##..#.##.##.#.##.##..#.#..##..#.#..#..#...##..####....#.##.#####....##.\n#..#..###.###.##...#########.##.#.###....##.###.###.#.##.#.###....#.#..#.....######...#.#.#....#.#..\n.....#.######.###.##.........##...#..#..#..##.##..#..###..##..#.#.##.#.#.###.......#.##.....####...#\n.######.#.####...#.###......#..#.###.##.###.....##.#####..###...##.##.#...#.....#..#...##.#.#.#.####\n.##..##.#.#..#..##..##.####.#...####......##...##.#####.###..#...#.##..#.#...#.#..#..#..#...#....###\n...##.#..#.#..#.###.####.#.#.....#.#.#..##.##.#..#.###.#...##.####.#...#.##..#..####.#####..#.#.#..#\n#.##.#..#..##.#..##...#.##.#.###...##.##..#.##.#.#..#..#..##..##.##.#.....#..##...#.#..#....#..####.\n#.##..###...##..####.##.#.##..##........###.#..###.#.####..####.#.##.#....#######.#####..##.#..#####\n..###.#.#...##....##...##..#..#.#.#.....#..#.#.#.####...#..#...#..#......###.##..#####.####..####..#\n..#...#.##..###.#.##..#...###..##.#####.###.#.#.......#.#....###.####..#..#.#..#...###.#.#..###..##.\n##.#.#.##.#..###.###......###..##..#..##.#..#.##.#..###..#.####...#..#####..#.####.##.#...#..#.##.#.\n..#.##.#......#..............##.###..##.###.#.#.##...##.#.......#######.#...#..##.#..####..#.##.#.##\n.##..........##...###......#.#.....#.##.##.##..####..##.#.##.#..###.#..####..##.#..#..#.###.##..#..#\n##...##...###...#.##..##.####.....#.#.####.##..##.##.##........#.##...##...###########...#..#..#...#\n.##.##.#..##.#.########...###...###.#...#.####...#.###.##.###...#...###...##...#........##.##.###.#.\n##.#..###...######.#.#.#.#.#.#..........#..##...##..#....#..###..######.....#.#..##.#.#..##.##.##.#.\n###.##..#.##..#...#.#...#.##...#.###.#..#..#..##.##.##..#..#..###.#.##...##...#.#.##.###.....#.###.#\n.##..#.##....#.#......###.##.#.##......##..#.##..##..#..##..########..##.#..##...#..#...###.#...#.##\n.###..#.#.......#....#...#.#....###.#.###.##.##..#.#.....#...#####.#..####.##.##.#.#.#.....#####.#..\n##...##.#####.#....###.#.##.###.#.#.#..#..###..##..####..##..###.....##.#.########..#..##..#.#.#.###\n..#.##.#.##..###..####.##..#..###....#..#....#.##..#.####.##.#...#.##.##..########.##.##.#.#.#...##.\n.#..###.######.#.###.##.#.##......##.###.##.#....#......###....####.##.###.#..##.####.#..###.#......\n#.....###....##.....###.#..#....#.#...#.#....#.##.######.####.###########...#..#..#..##.#.##.##....#\n.##.#.#..#...#.#.##..#...####..#.#.#...##..#..#..##...####.#...######.....##...##.##.#..###.###..#..\n..#.#..##....##...####.#...#...###..#......#.##....#.##...##......####.##.#.##.#.#.#..#...#..##..#..";

fn part1() {
    let (image_enhancement_algorithm, input) = INPUT.split_once("\n\n").unwrap();

    let image_enhancement_algorithm = image_enhancement_algorithm.chars()
        .map(|c| c == '#')
        .collect();
    let (input_map, (width, height)) = init(input);

    // Note:
    // The actual input puts a # on the number 0, i.e. after the 1st iteration, all points on the
    // very outside will be a light (#).
    // Since the last element of (= 111111111) in the image enhancement algorithm is a dot (.),
    // these will again be gone after the 2nd iteration, at least where there are 9 lights next
    // to a point.
    // To mitigate all of this, we need to set the bounds smartly for the 1st and 2nd step.
    // For the first step, we set it -3 for each min bound, i.e. we search what we will get up to
    // until -3 of each min bound. Therefore we will have a border that is 2 lights thick, in the
    // end.
    // For the second step, we set it to -2 of the bounds before... AND then we also only check
    // these bounds!! For these bounds, the lights should be correct then.

    let bounds = (-3, -3, width + 3, height + 3);
    let (from_x, from_y, to_x, to_y) = bounds;

    print_map(&input_map, bounds);

    let light = is_light(&input_map, &image_enhancement_algorithm, (2, 3));
    println!("{}", light);

    let first_map = find_next_map(&input_map, &image_enhancement_algorithm, bounds);
    print_map(&first_map, bounds);

    let mut bounds = (from_x + 1, from_y + 1, to_x - 1, to_y - 1);
    let second_map = find_next_map(&first_map, &image_enhancement_algorithm, bounds);
    print_map(&second_map, bounds);

    println!("{}", second_map.len());

    let mut newest_map = second_map;
    for _ in 0..24 {
        bounds = (bounds.0 - 3, bounds.1 - 3, bounds.2 + 3, bounds.3 + 3);
        newest_map = find_next_map(&newest_map, &image_enhancement_algorithm, bounds);

        bounds = (bounds.0 + 1, bounds.1 + 1, bounds.2 - 1, bounds.3 - 1);
        newest_map = find_next_map(&newest_map, &image_enhancement_algorithm, bounds);

        print_map(&newest_map, bounds);
        println!("{}", newest_map.len());
    }
}

fn print_map(map: &HashSet<(i32, i32)>, (from_x, from_y, to_x, to_y): (i32, i32, i32, i32)) {
    println!("\nMap:");
    for y in from_y..=to_y {
        for x in from_x..=to_x {
            print!("{}", if map.contains(&(x, y)) { "#" } else { "." });
        }
        println!();
    }
}

fn find_next_map(map: &HashSet<(i32, i32)>,
                 image_enhancement_algorithm: &Vec<bool>,
                 (from_x, from_y, to_x, to_y): (i32, i32, i32, i32)) -> HashSet<(i32, i32)> {
    let mut next_map = HashSet::new();
    for x in from_x..=to_x {
        for y in from_y..=to_y {
            if is_light(map, image_enhancement_algorithm, (x, y)) {
                next_map.insert((x, y));
            }
        }
    }
    next_map
}

fn is_light(map: &HashSet<(i32, i32)>, image_enhancement_algorithm: &Vec<bool>, (x, y): (i32, i32)) -> bool {
    let mut n = 0;

    if map.contains(&(x + 1, y + 1)) { n = n + (1 << 0); }
    if map.contains(&(x, y + 1)) { n = n + (1 << 1); }
    if map.contains(&(x - 1, y + 1)) { n = n + (1 << 2); }

    if map.contains(&(x + 1, y)) { n = n + (1 << 3); }
    if map.contains(&(x, y)) { n = n + (1 << 4); }
    if map.contains(&(x - 1, y)) { n = n + (1 << 5); }

    if map.contains(&(x + 1, y - 1)) { n = n + (1 << 6); }
    if map.contains(&(x, y - 1)) { n = n + (1 << 7); }
    if map.contains(&(x - 1, y - 1)) { n = n + (1 << 8); }

    let result = *image_enhancement_algorithm.get(n).unwrap();
    // println!("(x, y) = ({}, {}) -- n = {:#b} - {} - {}", x, y, n, n, result);

    result
}

fn init(input: &str) -> (HashSet<(i32, i32)>, (i32, i32)) {
    let mut input_map = HashSet::new();

    let mut lines = input.lines();
    let mut y = 0;
    let mut width = 0;

    while let Some(line) = lines.next() {
        let mut chars = line.chars();
        let mut x = 0;

        while let Some(c) = chars.next() {
            if c == '#' { input_map.insert((x, y)); }

            x += 1;
        }

        width = x;
        y += 1;
    }

    let height = y;
    (input_map, (width, height))
}


fn part2() {}

fn main() {
    part1();
}